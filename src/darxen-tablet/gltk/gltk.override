/* vim: set filetype=c : */
%%
headers
#include <Python.h>
#include "pygobject.h"
#include "gltk.h"
%%
modulename gltk
%%
import gobject.GObject as PyGObject_Type
import gobject.GObject as PyGInitiallyUnowned_Type
%%
ignore-glob
  *_get_type
  *_error_quark
%%
ignore
  gltk_accum_event
%%
ignore-type
  GltkBinError
  GltkBoxError
  GltkButtonError
  GltkDialogError
  GltkEntryError
  GltkHBoxError
  GltkKeyboardError
  GltkLabelError
  GltkListError
  GltkMiniScreenError
  GltkScreenError
  GltkScrollableError
  GltkSlideButtonError
  GltkSpinnerError
  GltkSpinnerModelError
  GltkToggleButtonError
  GltkVBoxError
  GltkWidgetError
  GltkWindowError
%%
new-constructor GLTK_TYPE_WINDOW
%%
override gltk_window_new kwargs
static int
_wrap_gltk_window_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    self->obj = (GObject *)gltk_window_new();

    if (!self->obj) {
        PyErr_SetString(PyExc_RuntimeError, "could not create GltkWindow object");
        return -1;
    }
    pygobject_register_wrapper((PyObject *)self);
    return 0;
}
/*%%
override gltk_event_for_mouse
static PyObject*
_wrap_gltk_event_for_mouse(PyObject *self, PyObject *args, PyObject *kwargs)
{
	GltkEvent event;

	//PyArg_ParseTuple(args, "i(ii)", 
	if (!PyArg_ParseTuple(args, "i", &event.touch.fingers))
		return -1;

	self->boxed = g_boxed_copy(GLTK_TYPE_EVENT, &event);

	
}*/

