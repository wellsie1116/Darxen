/* vim: set filetype=c : */
%%
headers
#include <Python.h>
#include "pygobject.h"
#include "gltk.h"
%%
modulename gltk
%%
import gobject.GObject as PyGObject_Type
import gobject.GObject as PyGInitiallyUnowned_Type
%%
ignore-glob
  *_get_type
  *_error_quark
%%
ignore
  gltk_accum_event
  gltk_accum_find_widget
%%
ignore-type
  GltkBinError
  GltkBoxError
  GltkButtonError
  GltkDialogError
  GltkEntryError
  GltkHBoxError
  GltkKeyboardError
  GltkLabelError
  GltkListError
  GltkMiniScreenError
  GltkScreenError
  GltkScrollableError
  GltkSlideButtonError
  GltkSpinnerError
  GltkSpinnerModelError
  GltkToggleButtonError
  GltkConfigButtonError
  GltkVBoxError
  GltkWidgetError
  GltkWindowError
%%
new-constructor GLTK_TYPE_WINDOW
new-constructor GLTK_TYPE_TABLE
new-constructor GLTK_TYPE_BUTTON
new-constructor GLTK_TYPE_SLIDE_BUTTON
new-constructor GLTK_TYPE_CONFIG_BUTTON
new-constructor GLTK_TYPE_SPINNER_MODEL
new-constructor GLTK_TYPE_SPINNER
new-constructor GLTK_TYPE_ENTRY
new-constructor GLTK_TYPE_HBOX
new-constructor GLTK_TYPE_VBOX
new-constructor GLTK_TYPE_BOX
%%
override gltk_window_new kwargs
static int
_wrap_gltk_window_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    self->obj = (GObject *)gltk_window_new();

    if (!self->obj) {
        PyErr_SetString(PyExc_RuntimeError, "could not create GltkWindow object");
        return -1;
    }
    pygobject_register_wrapper((PyObject *)self);
    return 0;
}
%%
override-slot GltkEvent.tp_getattr
static PyObject *
_wrap_gltk_event_tp_getattr(PyObject *self, char *attr)
{
    GltkEvent *event = pyg_boxed_get(self, GltkEvent);
    guint i;

    switch(event->type) {
    case GLTK_TOUCH:
        if (!strcmp(attr, "__members__"))
            return Py_BuildValue("[sssss]",
                                 "type", "id", "touchType",
                                 "fingers", "positions");
        if (!strcmp(attr, "id"))
            return PyInt_FromLong(event->touch.id);
		if (!strcmp(attr, "touchType"))
			return pyg_enum_from_gtype(GLTK_TYPE_TOUCH_EVENT_TYPE, event->touch.touchType);
        if (!strcmp(attr, "fingers"))
            return PyInt_FromLong(event->touch.fingers);
		if (!strcmp(attr, "positions")) {
			if (event->touch.positions) {
				PyObject *v = PyTuple_New(event->touch.fingers);
				if (!v) return NULL;
				for (i = 0; i < event->touch.fingers; i++)
					PyTuple_SetItem(v, i, Py_BuildValue("(ii)", event->touch.positions[i].x,
															   	event->touch.positions[i].y));
				return v;
			} else {
				Py_INCREF(Py_None);
				return Py_None;
			}
		}
        break;
	case GLTK_LONG_TOUCH:
	case GLTK_CLICK:
        if (!strcmp(attr, "__members__"))
            return Py_BuildValue("[s]", "type");
		break;
	case GLTK_DRAG:
	case GLTK_MULTI_DRAG:
	case GLTK_PINCH:
	case GLTK_ROTATE:
		//FIXME These should not be opaque
        if (!strcmp(attr, "__members__"))
            return Py_BuildValue("[s]", "type");
		break;
	
    default:
        break;
    }
    
    if (!strcmp(attr, "type"))
        return pyg_enum_from_gtype(GLTK_TYPE_EVENT_TYPE, event->type);
    if (!strcmp(attr, "__members__"))
        return Py_BuildValue("[sss]", "type");

    return Py_FindMethod((PyMethodDef*)_PyGltkEvent_methods, self, attr);
}


%%
override-slot GltkEvent.tp_setattr
#define INT_CHECK() \
	if (!PyInt_Check(value)) { \
		PyErr_Format(PyExc_TypeError, "%s must be an int", attr); \
		return -1; \
	} 
#define INT_OR_LONG_CHECK() \
	if (!PyInt_Check(value) && !PyLong_Check(value)) { \
		PyErr_Format(PyExc_TypeError, "%s must be an int or a long", attr); \
		return -1; \
	}
#define FLOAT_CHECK() \
	if (!PyFloat_Check(value)) { \
		PyErr_Format(PyExc_TypeError, "%s must be a float", attr); \
		return -1; \
	} 
#define STRING_CHECK() \
	if (!PyString_Check(value)) { \
		PyErr_Format(PyExc_TypeError, "%s must be a string", attr); \
		return -1; \
	} 
static int
_wrap_gltk_event_tp_setattr(PyObject *self, char *attr, PyObject *value)
{
    GltkEvent *event;
	int i;

    if (value == NULL) {
        PyErr_SetString(PyExc_TypeError, "can't delete attributes");
        return -1;
    }

    event = pyg_boxed_get(self, GltkEvent);

    /* Common members */
    if (attr[0] == 't' && !strcmp(attr, "type")) {
		PyErr_SetString(PyExc_AttributeError, "type is not writable");
		return -1;
	}
	
    switch(event->type) {
    case GLTK_TOUCH:
	if (!strcmp(attr, "id")) {
		INT_CHECK();
	    event->touch.id = PyInt_AsLong(value);
	    return 0;
	} else if (!strcmp(attr, "touchType")) {
		INT_CHECK();
		event->touch.touchType = PyInt_AsLong(value);
	    return 0;
	} else if (!strcmp(attr, "fingers")) {
	    PyErr_SetString(PyExc_TypeError, "fingers is not writable");
	    return -1;
	} else if (!strcmp(attr, "positions")) {
		if (!PyTuple_Check(value)) {
			PyErr_SetString(PyExc_TypeError, "positions must be a tuple");
			return -1;
		}
		event->touch.fingers = PyTuple_Size(value);
		if (event->touch.positions)
			g_free(event->touch.positions);
		event->touch.positions = g_new(GltkTouchPosition, event->touch.fingers);
		for (i = 0; i < event->touch.fingers; i++) {
			PyObject* v = PyTuple_GetItem(value, i);
			if (!PyTuple_Check(v) || PyTuple_Size(v) != 2) {
				PyErr_SetString(PyExc_TypeError, "elements in positions must be a tuple of size 2");
				g_free(event->touch.positions);
				event->touch.positions = NULL;
				event->touch.fingers = 0;
				return -1;
			}
			if (!PyArg_ParseTuple(v, "ii;elements must be 2-tuples", &event->touch.positions[i].x,
																	 &event->touch.positions[i].y)) {
				g_free(event->touch.positions);
				event->touch.positions = NULL;
				event->touch.fingers = 0;
				return -1;
			}
		}
	    return 0;
	}
        break;
    default:
		break;
    }
    
    PyErr_SetString(PyExc_AttributeError, "could not write attribute");
    return -1;
}
#undef INT_CHECK
#undef INT_OR_LONG_CHECK
#undef FLOAT_CHECK
#undef STRING_CHECK	






